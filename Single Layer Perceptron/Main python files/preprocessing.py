# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-YQxmKALTn-TPdniWsqE7_-pnsnwqJx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import warnings
import joblib
warnings.filterwarnings('ignore')

dataset = pd.read_csv('penguins.csv')
dataset.shape

dataset.head()

dataset.isna().sum()

"""Since the null values are small and in one feature only, we can make a predictive machine learning model that can classify the gender based on the other features and the label (species) after we process the other features for the best learning, also we can train it only on the species of type Adelie and Gentoo as the null values exist only in them """

dataset['species'].unique()

mask = dataset['gender'].isnull()==True
nullEntries = dataset[mask]

nullEntries

"""Checking data normality in python: https://www.youtube.com/watch?v=12qn03Ml87E

Perform data transformation for normality: https://www.youtube.com/watch?v=xOZ3DxybQKc 

All the features are skewed and have a negative kurtosis but feature (bill_length) is the closest to normal distribution
"""

numericalFeatures=['bill_length_mm','bill_depth_mm','flipper_length_mm','body_mass_g']

def getAndVisualizeSkewness(feature):
    print("Visualizing feature {feature}".format(feature=feature))
    plt.hist(dataset[feature])
    plt.show()
    print("{feature} is skewed by {skew}".format(feature = feature, skew = stats.skew(dataset[feature])))
    print("{feature}'s kurtosis is {kurtosis}".format(feature=feature,kurtosis=stats.kurtosis(dataset['bill_length_mm'])))
    print('-'*40)

for feature in numericalFeatures:
    getAndVisualizeSkewness(feature)

"""All of these transformation functions will also result in a skewed data, so another solution is to transform according to different measures,


scaling would not affect skewness, but at least all the numbers will be in the same range
"""

def transform(feature):
    print("{0}".format(feature))
    transformedFeature = dataset[feature].transform([np.sqrt,np.log,np.reciprocal])
    transformedFeature.hist(layout=(2,2),figsize=(8,8))
    plt.show()
    print('-'*40)

for feature in numericalFeatures:
    transform(feature)

"""Changing body mass from grams -> kilograms

Changing flipper length, bill length, bill depth from milimeters - > centimeters  
"""

dataset['body_mass_g'] = dataset['body_mass_g']/1000
dataset['flipper_length_mm'] = dataset['flipper_length_mm']/10

dataset.head()

speciesWithNullEntriesMask = dataset['species'] != 'Chinstrap'
speciesWithNullEntries = dataset[speciesWithNullEntriesMask]
speciesWithNullEntries.head()

nullEntries = speciesWithNullEntries[mask]
nullEntries

nullEntriesIndex = nullEntries.index
nullEntriesIndex

speciesWithNullEntries['species'] = [1 if species =='Adelie' else 0 for species in speciesWithNullEntries['species']]
nullEntries['species'] =  [1 if species =='Adelie' else 0 for species in nullEntries['species']]
speciesWithNullEntries

speciesWithNullEntries.drop(index=nullEntriesIndex, axis=0,inplace=True)

speciesWithNullEntries.isna().sum()

speciesWithNullEntries['gender'] = [1 if gender=='female' else 0 for gender in speciesWithNullEntries['gender']]

genderModel = LogisticRegression()
y_train = speciesWithNullEntries['gender']
x_train = speciesWithNullEntries.drop(columns=['gender'],axis=1)
x_test = nullEntries.drop(columns=['gender'],axis=1)
x_test

genderModel.fit(x_train,y_train)
y_train_predicted = genderModel.predict(x_train)
print("the accuracy is {0}".format(accuracy_score(y_train,y_train_predicted)))
y_test = genderModel.predict(x_test)
y_test

joblib.dump(genderModel,"genderModel.h5")

nullEntries['gender'] = y_test

speciesWithNullEntries = speciesWithNullEntries.append([nullEntries])
speciesWithNullEntries

speciesWithNullEntries['species'] = ['Adelie' if species ==1 else 'Gentoo' for species in speciesWithNullEntries['species']]
speciesWithNullEntries ['gender']= ['female' if gender==1 else 'male' for gender in speciesWithNullEntries['gender']]

speciesWithNullEntries

chinstrap = dataset[dataset['species']=='Chinstrap']
processedDataset = pd.DataFrame()
processedDataset = processedDataset.append([speciesWithNullEntries,chinstrap])
processedDataset['gender'] = [1 if gender =='female' else 0 for gender in processedDataset['gender']]
processedDataset

processedDataset.isna().sum()

processedDataset.to_csv("processed-penguins.csv",index = False)